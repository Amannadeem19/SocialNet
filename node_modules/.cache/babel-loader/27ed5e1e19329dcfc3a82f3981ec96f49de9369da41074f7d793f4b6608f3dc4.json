{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Toshiba\\\\OneDrive\\\\Documents\\\\WEB DEVELOPMENT\\\\BloodApp\\\\client\\\\src\\\\components\\\\Post\\\\CreateRequest.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport axios from 'axios';\nimport useStyles from './styles';\nimport { TextField, Typography, Button, Paper, Stack, Alert } from \"@mui/material\";\nimport { useHistory } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CreateRequest = _ref => {\n  _s();\n  let {\n    profile\n  } = _ref;\n  const url = profile;\n  const classes = useStyles();\n  const history = useHistory();\n  const user = sessionStorage.getItem('profile');\n  const [postData, setPostData] = useState({\n    bloodGroup: \"\",\n    QtyNeed: \"\",\n    Reason: \"\",\n    timePeriod: \"\",\n    profile: \"\"\n  });\n  const [alert, setAlert] = useState(false);\n  const [alertData, setAlertData] = useState(\"\");\n\n  // const validationSchema = Yup.object().shape({\n  //     // cnic : Yup.number().required('The cnic is required'),\n  //     bloodGroup: Yup.string().required('The blood group is required'),\n  //     QtyNeed: Yup.number().required('The qty is required'),\n  //     // Date : Yup.string().required('The date is required'),\n  //     // .max(new Date(), 'You cant be be born in a future'),\n  //     // Time: Yup.string().required('the time is required'),\n  //     TimePeriod : Yup.number().required('The time period is required'),\n  //     Reason: Yup.string().min(10).required('The reason is required'),\n  // });\n  // {cnic : cnic, bloodGroup: bloodGroup, QtyNeed: QtyNeed, Date : Date, Time : Time, TimePeriod : TimePeriod, Reason : Reason \n  const handleSubmit = e => {\n    e.preventDefault();\n\n    // if creating a post \n    postData.profile = url;\n    console.log(postData);\n    axios.post('http://localhost:3001/api/Request/create', postData, {\n      headers: {\n        accessToken2: sessionStorage.getItem('accessToken2')\n      }\n    }).then(response => {\n      if (response.data.error) {\n        setAlert(true);\n        setAlertData(response.data.error);\n      } else {\n        console.log(response.data);\n        clear();\n        history.push('/user');\n      }\n    });\n    clear();\n  };\n  const clear = () => {\n    setPostData({\n      bloodGroup: \"\",\n      timePeriod: \"\",\n      QtyNeed: \"\",\n      Reason: \"\",\n      profile: \"\"\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [alert && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Stack, {\n        sx: {\n          width: '100%',\n          marginBottom: '20px'\n        },\n        children: /*#__PURE__*/_jsxDEV(Alert, {\n          onClose: () => {\n            setAlert(false);\n            setAlertData(\"\");\n          },\n          severity: \"error\",\n          children: alertData\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 16\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 16\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 16\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      autoComplete: \"off\",\n      validate: \"true\",\n      className: `${classes.root} ${classes.form}`,\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h6\",\n        children: \"Creating a Post\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        name: \"bloodGroup\",\n        variant: \"outlined\",\n        fullWidth: true,\n        label: \"Blood Group\",\n        required: true,\n        value: postData.bloodGroup,\n        onChange: e => setPostData({\n          ...postData,\n          bloodGroup: e.target.value\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        name: \"timePeriod\",\n        variant: \"outlined\",\n        fullWidth: true,\n        label: \"Time Period (days)\",\n        required: true,\n        value: postData.timePeriod,\n        onChange: e => setPostData({\n          ...postData,\n          timePeriod: e.target.value\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        name: \"QtyNeed\",\n        variant: \"outlined\",\n        fullWidth: true,\n        label: \"Quantity Need\",\n        required: true,\n        value: postData.QtyNeed,\n        onChange: e => setPostData({\n          ...postData,\n          QtyNeed: e.target.value\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        name: \"Reason\",\n        variant: \"outlined\",\n        fullWidth: true,\n        label: \"Message\",\n        required: true,\n        multiline: true,\n        rows: 4,\n        value: postData.Reason,\n        onChange: e => setPostData({\n          ...postData,\n          Reason: e.target.value\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        className: classes.buttonSubmit,\n        variant: \"contained \",\n        size: \"large\",\n        type: \"submit\",\n        fullWidth: true,\n        children: \"Post\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        className: classes.buttonClear,\n        size: \"small\",\n        onClick: clear,\n        fullWidth: true,\n        children: \"Clear\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 9\n  }, this);\n};\n_s(CreateRequest, \"Eclh3WKuyqpH9ygSxb0YIy5ZnuE=\", false, function () {\n  return [useStyles, useHistory];\n});\n_c = CreateRequest;\nexport default CreateRequest;\nvar _c;\n$RefreshReg$(_c, \"CreateRequest\");","map":{"version":3,"names":["React","useState","axios","useStyles","TextField","Typography","Button","Paper","Stack","Alert","useHistory","CreateRequest","profile","url","classes","history","user","sessionStorage","getItem","postData","setPostData","bloodGroup","QtyNeed","Reason","timePeriod","alert","setAlert","alertData","setAlertData","handleSubmit","e","preventDefault","console","log","post","headers","accessToken2","then","response","data","error","clear","push","width","marginBottom","root","form","target","value","buttonSubmit","buttonClear"],"sources":["C:/Users/Toshiba/OneDrive/Documents/WEB DEVELOPMENT/BloodApp/client/src/components/Post/CreateRequest.js"],"sourcesContent":["import React,{useState} from \"react\";\r\nimport axios from 'axios'\r\nimport useStyles from './styles';\r\nimport { TextField, Typography, Button, Paper, Stack, Alert} from \"@mui/material\";\r\nimport {useHistory} from 'react-router-dom';\r\n\r\nconst CreateRequest = ({profile})=>{\r\n  \r\n    const url = profile;\r\n    const classes  = useStyles();\r\n    const history = useHistory();\r\n    const user =  sessionStorage.getItem('profile');\r\n    const [postData, setPostData] = useState({\r\n        bloodGroup:\"\",\r\n        QtyNeed:\"\",\r\n        Reason:\"\",\r\n        timePeriod:\"\",  \r\n        profile:\"\",\r\n    })\r\n    const [alert, setAlert] = useState(false);\r\n    const [alertData, setAlertData] = useState(\"\");\r\n\r\n    // const validationSchema = Yup.object().shape({\r\n    //     // cnic : Yup.number().required('The cnic is required'),\r\n    //     bloodGroup: Yup.string().required('The blood group is required'),\r\n    //     QtyNeed: Yup.number().required('The qty is required'),\r\n    //     // Date : Yup.string().required('The date is required'),\r\n    //     // .max(new Date(), 'You cant be be born in a future'),\r\n    //     // Time: Yup.string().required('the time is required'),\r\n    //     TimePeriod : Yup.number().required('The time period is required'),\r\n    //     Reason: Yup.string().min(10).required('The reason is required'),\r\n    // });\r\n    // {cnic : cnic, bloodGroup: bloodGroup, QtyNeed: QtyNeed, Date : Date, Time : Time, TimePeriod : TimePeriod, Reason : Reason \r\n    const handleSubmit = (e)=>{\r\n        e.preventDefault();\r\n\r\n\r\n        // if creating a post \r\n        postData.profile = url;\r\n        console.log(postData);\r\n    \r\n        axios.post('http://localhost:3001/api/Request/create', postData,{\r\n            headers:{\r\n                accessToken2 : sessionStorage.getItem('accessToken2'),\r\n            }\r\n        }).then((response)=>{\r\n            if(response.data.error){\r\n                setAlert(true);\r\n                setAlertData(response.data.error);\r\n            }else{\r\n            console.log(response.data);\r\n                clear();\r\n                history.push('/user');\r\n            }\r\n        })\r\n        clear();\r\n\r\n    }\r\n    const clear = () =>{\r\n        setPostData({\r\n            bloodGroup : \"\",\r\n            timePeriod : \"\",\r\n            QtyNeed:\"\",\r\n            Reason:\"\",\r\n            profile:\"\",\r\n        })\r\n    }\r\n    return (\r\n\r\n        \r\n\r\n        <div>\r\n             {alert && (\r\n               <div>\r\n               <Stack sx={{width:'100%', marginBottom:'20px'}}>\r\n               <Alert onClose={()=>{\r\n                   setAlert(false);\r\n                   setAlertData(\"\");\r\n               }} severity=\"error\">{alertData}\r\n               </Alert>\r\n               </Stack>\r\n               </div>\r\n           )}\r\n       \r\n           \r\n            <form autoComplete=\"off\" validate=\"true\" className={`${classes.root} ${classes.form}`} onSubmit={handleSubmit}>\r\n            {/* {user ? 'Editing' : 'Creating'} a Post */}\r\n            <Typography variant=\"h6\">Creating a Post</Typography>\r\n            <TextField\r\n            name=\"bloodGroup\"\r\n            variant=\"outlined\"\r\n            fullWidth\r\n            label=\"Blood Group\"\r\n            required\r\n            value={postData.bloodGroup}\r\n            onChange={(e) => setPostData({...postData, bloodGroup: e.target.value})}\r\n            \r\n            />\r\n\r\n        <TextField\r\n            name=\"timePeriod\"\r\n            variant=\"outlined\"\r\n            fullWidth\r\n            label=\"Time Period (days)\"\r\n            required\r\n            value={postData.timePeriod}\r\n            onChange={(e) => setPostData({...postData, timePeriod: e.target.value})}\r\n            \r\n            />\r\n\r\n        <TextField\r\n            name=\"QtyNeed\"\r\n            variant=\"outlined\"\r\n            fullWidth\r\n            label=\"Quantity Need\"\r\n            required\r\n            value={postData.QtyNeed}\r\n            onChange={(e) => setPostData({...postData, QtyNeed: e.target.value})}\r\n            \r\n            />\r\n\r\n        <TextField\r\n            name=\"Reason\"\r\n            variant=\"outlined\"\r\n            fullWidth\r\n            label=\"Message\"\r\n            required\r\n            multiline\r\n            rows={4}\r\n            value={postData.Reason}\r\n            onChange={(e) => setPostData({...postData, Reason: e.target.value})}\r\n            \r\n            />\r\n            \r\n            <Button className={classes.buttonSubmit} variant='contained ' size=\"large\" type=\"submit\" fullWidth >Post</Button>\r\n            <Button variant='contained' className={classes.buttonClear} size=\"small\" onClick={clear} fullWidth >Clear</Button>\r\n\r\n            </form>\r\n\r\n\r\n        </div>\r\n    \r\n    );\r\n    \r\n}\r\nexport default CreateRequest;"],"mappings":";;AAAA,OAAOA,KAAK,IAAEC,QAAQ,QAAO,OAAO;AACpC,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,SAAS,MAAM,UAAU;AAChC,SAASC,SAAS,EAAEC,UAAU,EAAEC,MAAM,EAAEC,KAAK,EAAEC,KAAK,EAAEC,KAAK,QAAO,eAAe;AACjF,SAAQC,UAAU,QAAO,kBAAkB;AAAC;AAE5C,MAAMC,aAAa,GAAG,QAAa;EAAA;EAAA,IAAZ;IAACC;EAAO,CAAC;EAE5B,MAAMC,GAAG,GAAGD,OAAO;EACnB,MAAME,OAAO,GAAIX,SAAS,EAAE;EAC5B,MAAMY,OAAO,GAAGL,UAAU,EAAE;EAC5B,MAAMM,IAAI,GAAIC,cAAc,CAACC,OAAO,CAAC,SAAS,CAAC;EAC/C,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGnB,QAAQ,CAAC;IACrCoB,UAAU,EAAC,EAAE;IACbC,OAAO,EAAC,EAAE;IACVC,MAAM,EAAC,EAAE;IACTC,UAAU,EAAC,EAAE;IACbZ,OAAO,EAAC;EACZ,CAAC,CAAC;EACF,MAAM,CAACa,KAAK,EAAEC,QAAQ,CAAC,GAAGzB,QAAQ,CAAC,KAAK,CAAC;EACzC,MAAM,CAAC0B,SAAS,EAAEC,YAAY,CAAC,GAAG3B,QAAQ,CAAC,EAAE,CAAC;;EAE9C;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA,MAAM4B,YAAY,GAAIC,CAAC,IAAG;IACtBA,CAAC,CAACC,cAAc,EAAE;;IAGlB;IACAZ,QAAQ,CAACP,OAAO,GAAGC,GAAG;IACtBmB,OAAO,CAACC,GAAG,CAACd,QAAQ,CAAC;IAErBjB,KAAK,CAACgC,IAAI,CAAC,0CAA0C,EAAEf,QAAQ,EAAC;MAC5DgB,OAAO,EAAC;QACJC,YAAY,EAAGnB,cAAc,CAACC,OAAO,CAAC,cAAc;MACxD;IACJ,CAAC,CAAC,CAACmB,IAAI,CAAEC,QAAQ,IAAG;MAChB,IAAGA,QAAQ,CAACC,IAAI,CAACC,KAAK,EAAC;QACnBd,QAAQ,CAAC,IAAI,CAAC;QACdE,YAAY,CAACU,QAAQ,CAACC,IAAI,CAACC,KAAK,CAAC;MACrC,CAAC,MAAI;QACLR,OAAO,CAACC,GAAG,CAACK,QAAQ,CAACC,IAAI,CAAC;QACtBE,KAAK,EAAE;QACP1B,OAAO,CAAC2B,IAAI,CAAC,OAAO,CAAC;MACzB;IACJ,CAAC,CAAC;IACFD,KAAK,EAAE;EAEX,CAAC;EACD,MAAMA,KAAK,GAAG,MAAK;IACfrB,WAAW,CAAC;MACRC,UAAU,EAAG,EAAE;MACfG,UAAU,EAAG,EAAE;MACfF,OAAO,EAAC,EAAE;MACVC,MAAM,EAAC,EAAE;MACTX,OAAO,EAAC;IACZ,CAAC,CAAC;EACN,CAAC;EACD,oBAII;IAAA,WACMa,KAAK,iBACJ;MAAA,uBACA,QAAC,KAAK;QAAC,EAAE,EAAE;UAACkB,KAAK,EAAC,MAAM;UAAEC,YAAY,EAAC;QAAM,CAAE;QAAA,uBAC/C,QAAC,KAAK;UAAC,OAAO,EAAE,MAAI;YAChBlB,QAAQ,CAAC,KAAK,CAAC;YACfE,YAAY,CAAC,EAAE,CAAC;UACpB,CAAE;UAAC,QAAQ,EAAC,OAAO;UAAA,UAAED;QAAS;UAAA;UAAA;UAAA;QAAA;MACtB;QAAA;QAAA;QAAA;MAAA;IACA;MAAA;MAAA;MAAA;IAAA,QAEX,eAGA;MAAM,YAAY,EAAC,KAAK;MAAC,QAAQ,EAAC,MAAM;MAAC,SAAS,EAAG,GAAEb,OAAO,CAAC+B,IAAK,IAAG/B,OAAO,CAACgC,IAAK,EAAE;MAAC,QAAQ,EAAEjB,YAAa;MAAA,wBAE9G,QAAC,UAAU;QAAC,OAAO,EAAC,IAAI;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAA6B,eACrD,QAAC,SAAS;QACV,IAAI,EAAC,YAAY;QACjB,OAAO,EAAC,UAAU;QAClB,SAAS;QACT,KAAK,EAAC,aAAa;QACnB,QAAQ;QACR,KAAK,EAAEV,QAAQ,CAACE,UAAW;QAC3B,QAAQ,EAAGS,CAAC,IAAKV,WAAW,CAAC;UAAC,GAAGD,QAAQ;UAAEE,UAAU,EAAES,CAAC,CAACiB,MAAM,CAACC;QAAK,CAAC;MAAE;QAAA;QAAA;QAAA;MAAA,QAEtE,eAEN,QAAC,SAAS;QACN,IAAI,EAAC,YAAY;QACjB,OAAO,EAAC,UAAU;QAClB,SAAS;QACT,KAAK,EAAC,oBAAoB;QAC1B,QAAQ;QACR,KAAK,EAAE7B,QAAQ,CAACK,UAAW;QAC3B,QAAQ,EAAGM,CAAC,IAAKV,WAAW,CAAC;UAAC,GAAGD,QAAQ;UAAEK,UAAU,EAAEM,CAAC,CAACiB,MAAM,CAACC;QAAK,CAAC;MAAE;QAAA;QAAA;QAAA;MAAA,QAEtE,eAEN,QAAC,SAAS;QACN,IAAI,EAAC,SAAS;QACd,OAAO,EAAC,UAAU;QAClB,SAAS;QACT,KAAK,EAAC,eAAe;QACrB,QAAQ;QACR,KAAK,EAAE7B,QAAQ,CAACG,OAAQ;QACxB,QAAQ,EAAGQ,CAAC,IAAKV,WAAW,CAAC;UAAC,GAAGD,QAAQ;UAAEG,OAAO,EAAEQ,CAAC,CAACiB,MAAM,CAACC;QAAK,CAAC;MAAE;QAAA;QAAA;QAAA;MAAA,QAEnE,eAEN,QAAC,SAAS;QACN,IAAI,EAAC,QAAQ;QACb,OAAO,EAAC,UAAU;QAClB,SAAS;QACT,KAAK,EAAC,SAAS;QACf,QAAQ;QACR,SAAS;QACT,IAAI,EAAE,CAAE;QACR,KAAK,EAAE7B,QAAQ,CAACI,MAAO;QACvB,QAAQ,EAAGO,CAAC,IAAKV,WAAW,CAAC;UAAC,GAAGD,QAAQ;UAAEI,MAAM,EAAEO,CAAC,CAACiB,MAAM,CAACC;QAAK,CAAC;MAAE;QAAA;QAAA;QAAA;MAAA,QAElE,eAEF,QAAC,MAAM;QAAC,SAAS,EAAElC,OAAO,CAACmC,YAAa;QAAC,OAAO,EAAC,YAAY;QAAC,IAAI,EAAC,OAAO;QAAC,IAAI,EAAC,QAAQ;QAAC,SAAS;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAAe,eACjH,QAAC,MAAM;QAAC,OAAO,EAAC,WAAW;QAAC,SAAS,EAAEnC,OAAO,CAACoC,WAAY;QAAC,IAAI,EAAC,OAAO;QAAC,OAAO,EAAET,KAAM;QAAC,SAAS;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAAgB;IAAA;MAAA;MAAA;MAAA;IAAA,QAE3G;EAAA;IAAA;IAAA;IAAA;EAAA,QAGL;AAId,CAAC;AAAA,GA1IK9B,aAAa;EAAA,QAGER,SAAS,EACVO,UAAU;AAAA;AAAA,KAJxBC,aAAa;AA2InB,eAAeA,aAAa;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}