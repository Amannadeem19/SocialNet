{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Toshiba\\\\OneDrive\\\\Documents\\\\WEB DEVELOPMENT\\\\BloodApp\\\\client\\\\src\\\\components\\\\Post\\\\CreateRequest.js\";\nimport React from \"react\";\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport axios from 'axios';\nimport { toast } from \"react-toastify\";\nimport useStyles from './styles';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction CreateRequest() {\n  const initialValues = {\n    bloodGroup: \"\",\n    QtyNeed: \"\",\n    Reason: \"\",\n    TimePeriod: \"\"\n  };\n  // const validationSchema = Yup.object().shape({\n  //     // cnic : Yup.number().required('The cnic is required'),\n  //     bloodGroup: Yup.string().required('The blood group is required'),\n  //     QtyNeed: Yup.number().required('The qty is required'),\n  //     // Date : Yup.string().required('The date is required'),\n  //     // .max(new Date(), 'You cant be be born in a future'),\n  //     // Time: Yup.string().required('the time is required'),\n  //     TimePeriod : Yup.number().required('The time period is required'),\n  //     Reason: Yup.string().min(10).required('The reason is required'),\n  // });\n  // {cnic : cnic, bloodGroup: bloodGroup, QtyNeed: QtyNeed, Date : Date, Time : Time, TimePeriod : TimePeriod, Reason : Reason \n  const onSubmit = data => {\n    axios.post('http://localhost:3001/api/Request/create', data, {\n      headers: {\n        accessToken2: sessionStorage.getItem('accessToken2')\n      }\n    }).then(response => {\n      if (response.data.error) {\n        toast.error('Request is not submitted');\n      } else {\n        console.log(data);\n        toast.success('Post is submitted successfully');\n      }\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(Paper, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 9\n  }, this);\n}\n_c = CreateRequest;\nexport default CreateRequest;\nvar _c;\n$RefreshReg$(_c, \"CreateRequest\");","map":{"version":3,"names":["React","Formik","Form","Field","ErrorMessage","Yup","axios","toast","useStyles","CreateRequest","initialValues","bloodGroup","QtyNeed","Reason","TimePeriod","onSubmit","data","post","headers","accessToken2","sessionStorage","getItem","then","response","error","console","log","success"],"sources":["C:/Users/Toshiba/OneDrive/Documents/WEB DEVELOPMENT/BloodApp/client/src/components/Post/CreateRequest.js"],"sourcesContent":["import React from \"react\";\r\nimport {Formik, Form, Field, ErrorMessage} from 'formik'\r\nimport * as Yup from 'yup'\r\nimport axios from 'axios'\r\nimport { toast } from \"react-toastify\";\r\nimport useStyles from './styles';\r\n\r\nfunction CreateRequest (){\r\n\r\n    const initialValues = {\r\n      \r\n        bloodGroup:\"\",\r\n        QtyNeed:\"\",\r\n        Reason:\"\",\r\n        TimePeriod:\"\",\r\n    \r\n    }\r\n    // const validationSchema = Yup.object().shape({\r\n    //     // cnic : Yup.number().required('The cnic is required'),\r\n    //     bloodGroup: Yup.string().required('The blood group is required'),\r\n    //     QtyNeed: Yup.number().required('The qty is required'),\r\n    //     // Date : Yup.string().required('The date is required'),\r\n    //     // .max(new Date(), 'You cant be be born in a future'),\r\n    //     // Time: Yup.string().required('the time is required'),\r\n    //     TimePeriod : Yup.number().required('The time period is required'),\r\n    //     Reason: Yup.string().min(10).required('The reason is required'),\r\n    // });\r\n    // {cnic : cnic, bloodGroup: bloodGroup, QtyNeed: QtyNeed, Date : Date, Time : Time, TimePeriod : TimePeriod, Reason : Reason \r\n    const onSubmit = (data)=>{\r\n        axios.post('http://localhost:3001/api/Request/create', data,{\r\n            headers:{\r\n                accessToken2 : sessionStorage.getItem('accessToken2'),\r\n            }\r\n        }).then((response)=>{\r\n            if(response.data.error){\r\n                toast.error('Request is not submitted')\r\n            }else{\r\n            console.log(data);\r\n            toast.success('Post is submitted successfully')\r\n            }\r\n        })\r\n    }\r\n    return (\r\n        \r\n        <Paper>\r\n\r\n\r\n        </Paper>\r\n    \r\n    );\r\n    \r\n}\r\nexport default CreateRequest;"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAAQC,MAAM,EAAEC,IAAI,EAAEC,KAAK,EAAEC,YAAY,QAAO,QAAQ;AACxD,OAAO,KAAKC,GAAG,MAAM,KAAK;AAC1B,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,KAAK,QAAQ,gBAAgB;AACtC,OAAOC,SAAS,MAAM,UAAU;AAAC;AAEjC,SAASC,aAAa,GAAG;EAErB,MAAMC,aAAa,GAAG;IAElBC,UAAU,EAAC,EAAE;IACbC,OAAO,EAAC,EAAE;IACVC,MAAM,EAAC,EAAE;IACTC,UAAU,EAAC;EAEf,CAAC;EACD;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA,MAAMC,QAAQ,GAAIC,IAAI,IAAG;IACrBV,KAAK,CAACW,IAAI,CAAC,0CAA0C,EAAED,IAAI,EAAC;MACxDE,OAAO,EAAC;QACJC,YAAY,EAAGC,cAAc,CAACC,OAAO,CAAC,cAAc;MACxD;IACJ,CAAC,CAAC,CAACC,IAAI,CAAEC,QAAQ,IAAG;MAChB,IAAGA,QAAQ,CAACP,IAAI,CAACQ,KAAK,EAAC;QACnBjB,KAAK,CAACiB,KAAK,CAAC,0BAA0B,CAAC;MAC3C,CAAC,MAAI;QACLC,OAAO,CAACC,GAAG,CAACV,IAAI,CAAC;QACjBT,KAAK,CAACoB,OAAO,CAAC,gCAAgC,CAAC;MAC/C;IACJ,CAAC,CAAC;EACN,CAAC;EACD,oBAEI,QAAC,KAAK;IAAA;IAAA;IAAA;EAAA,QAGE;AAIhB;AAAC,KA5CQlB,aAAa;AA6CtB,eAAeA,aAAa;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}