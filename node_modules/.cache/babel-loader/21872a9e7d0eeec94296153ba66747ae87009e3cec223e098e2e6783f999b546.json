{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Toshiba\\\\OneDrive\\\\Documents\\\\WEB DEVELOPMENT\\\\BloodApp\\\\client\\\\src\\\\components\\\\Post\\\\CreateRequest.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport axios from 'axios';\nimport { toast } from \"react-toastify\";\nimport useStyles from './styles';\nimport { TextField, Typography, Button, Paper } from \"@mui/material\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction CreateRequest() {\n  _s();\n  const classes = useStyles();\n  const user = sessionStorage.getItem('profile');\n  const [postData, setPostData] = useState({\n    bloodGroup: \"\",\n    QtyNeed: \"\",\n    Reason: \"\",\n    TimePeriod: \"\"\n  });\n\n  // const validationSchema = Yup.object().shape({\n  //     // cnic : Yup.number().required('The cnic is required'),\n  //     bloodGroup: Yup.string().required('The blood group is required'),\n  //     QtyNeed: Yup.number().required('The qty is required'),\n  //     // Date : Yup.string().required('The date is required'),\n  //     // .max(new Date(), 'You cant be be born in a future'),\n  //     // Time: Yup.string().required('the time is required'),\n  //     TimePeriod : Yup.number().required('The time period is required'),\n  //     Reason: Yup.string().min(10).required('The reason is required'),\n  // });\n  // {cnic : cnic, bloodGroup: bloodGroup, QtyNeed: QtyNeed, Date : Date, Time : Time, TimePeriod : TimePeriod, Reason : Reason \n  const handleSubmit = e => {\n    e.preventDefault();\n\n    // if creating a post \n    axios.post('http://localhost:3001/api/Request/create', postData, {\n      headers: {\n        accessToken2: sessionStorage.getItem('accessToken2')\n      }\n    }).then(response => {\n      if (response.data.error) {\n        toast.error('Request is not submitted');\n      } else {\n        console.log(data);\n        toast.success('Post is submitted successfully');\n      }\n    });\n    clear();\n  };\n  const clear = () => {\n    setPostData({\n      bloodGroup: \"\",\n      timePeriod: \"\",\n      QtyNeed: \"\",\n      Reason: \"\"\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(Paper, {\n    className: classes.paper,\n    elevation: 10,\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      autoComplete: \"off\",\n      validate: true,\n      className: `${classes.root} ${classes.form}`,\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h6\",\n        children: \"Creating a Post\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        name: \"bloodGroup\",\n        variant: \"outlined\",\n        fullWidth: true,\n        label: \"Blood Group\",\n        required: true,\n        value: postData.bloodGroup,\n        onChange: e => setPostData({\n          ...postData,\n          bloodGroup: e.target.value\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        name: \"Time Period\",\n        variant: \"outlined\",\n        fullWidth: true,\n        label: \"Time Period (days)\",\n        type: \"number\",\n        required: true,\n        value: postData.timePeriod,\n        onChange: e => setPostData({\n          ...postData,\n          timePeriod: e.target.value\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        name: \"QtyNeed\",\n        variant: \"outlined\",\n        fullWidth: true,\n        label: \"Quantity Need\",\n        type: \"number\",\n        required: true,\n        value: postData.QtyNeed,\n        onChange: e => setPostData({\n          ...postData,\n          QtyNeed: e.target.value\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        name: \"Reason\",\n        variant: \"outlined\",\n        fullWidth: true,\n        label: \"Message\",\n        required: true,\n        value: postData.Reason,\n        onChange: e => setPostData({\n          ...postData,\n          Reason: e.target.value\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        className: classes.buttonSubmit,\n        variant: \"contained \",\n        size: \"large\",\n        type: \"submit\",\n        fullWidth: true,\n        children: \"Post\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        className: classes.buttonClear,\n        size: \"small\",\n        onClick: clear,\n        fullWidth: true,\n        children: \"Clear\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 9\n  }, this);\n}\n_s(CreateRequest, \"ACKSfq9GOij5E8WkU0u/uCg5bkc=\", false, function () {\n  return [useStyles];\n});\n_c = CreateRequest;\nexport default CreateRequest;\nvar _c;\n$RefreshReg$(_c, \"CreateRequest\");","map":{"version":3,"names":["React","useState","Formik","Form","Field","ErrorMessage","Yup","axios","toast","useStyles","TextField","Typography","Button","Paper","CreateRequest","classes","user","sessionStorage","getItem","postData","setPostData","bloodGroup","QtyNeed","Reason","TimePeriod","handleSubmit","e","preventDefault","post","headers","accessToken2","then","response","data","error","console","log","success","clear","timePeriod","paper","root","form","target","value","buttonSubmit","buttonClear"],"sources":["C:/Users/Toshiba/OneDrive/Documents/WEB DEVELOPMENT/BloodApp/client/src/components/Post/CreateRequest.js"],"sourcesContent":["import React,{useState} from \"react\";\r\nimport {Formik, Form, Field, ErrorMessage} from 'formik'\r\nimport * as Yup from 'yup'\r\nimport axios from 'axios'\r\nimport { toast } from \"react-toastify\";\r\nimport useStyles from './styles';\r\nimport { TextField, Typography, Button, Paper} from \"@mui/material\";\r\n\r\nfunction CreateRequest (){\r\n    const classes  = useStyles();\r\n    const user =  sessionStorage.getItem('profile');\r\n    const [postData, setPostData] = useState({\r\n        bloodGroup:\"\",\r\n        QtyNeed:\"\",\r\n        Reason:\"\",\r\n        TimePeriod:\"\",  \r\n    })\r\n    \r\n    // const validationSchema = Yup.object().shape({\r\n    //     // cnic : Yup.number().required('The cnic is required'),\r\n    //     bloodGroup: Yup.string().required('The blood group is required'),\r\n    //     QtyNeed: Yup.number().required('The qty is required'),\r\n    //     // Date : Yup.string().required('The date is required'),\r\n    //     // .max(new Date(), 'You cant be be born in a future'),\r\n    //     // Time: Yup.string().required('the time is required'),\r\n    //     TimePeriod : Yup.number().required('The time period is required'),\r\n    //     Reason: Yup.string().min(10).required('The reason is required'),\r\n    // });\r\n    // {cnic : cnic, bloodGroup: bloodGroup, QtyNeed: QtyNeed, Date : Date, Time : Time, TimePeriod : TimePeriod, Reason : Reason \r\n    const handleSubmit = (e)=>{\r\n        e.preventDefault();\r\n\r\n\r\n        // if creating a post \r\n        axios.post('http://localhost:3001/api/Request/create', postData,{\r\n            headers:{\r\n                accessToken2 : sessionStorage.getItem('accessToken2'),\r\n            }\r\n        }).then((response)=>{\r\n            if(response.data.error){\r\n                toast.error('Request is not submitted')\r\n            }else{\r\n            console.log(data);\r\n            toast.success('Post is submitted successfully')\r\n            }\r\n        })\r\n        clear();\r\n\r\n    }\r\n    const clear = () =>{\r\n        setPostData({\r\n            bloodGroup : \"\",\r\n            timePeriod : \"\",\r\n            QtyNeed:\"\",\r\n            Reason:\"\",\r\n        })\r\n    }\r\n    return (\r\n        \r\n        <Paper className={classes.paper} elevation={10}>\r\n            <form autoComplete=\"off\" validate className={`${classes.root} ${classes.form}`} onSubmit={handleSubmit}>\r\n            {/* {user ? 'Editing' : 'Creating'} a Post */}\r\n            <Typography variant=\"h6\">Creating a Post</Typography>\r\n            <TextField\r\n            name=\"bloodGroup\"\r\n            variant=\"outlined\"\r\n            fullWidth\r\n            label=\"Blood Group\"\r\n            required\r\n            value={postData.bloodGroup}\r\n            onChange={(e) => setPostData({...postData, bloodGroup: e.target.value})}\r\n            \r\n            />\r\n\r\n        <TextField\r\n            name=\"Time Period\"\r\n            variant=\"outlined\"\r\n            fullWidth\r\n            label=\"Time Period (days)\"\r\n            type=\"number\"\r\n            required\r\n            value={postData.timePeriod}\r\n            onChange={(e) => setPostData({...postData, timePeriod: e.target.value})}\r\n            \r\n            />\r\n\r\n        <TextField\r\n            name=\"QtyNeed\"\r\n            variant=\"outlined\"\r\n            fullWidth\r\n            label=\"Quantity Need\"\r\n            type=\"number\"\r\n            required\r\n            value={postData.QtyNeed}\r\n            onChange={(e) => setPostData({...postData, QtyNeed: e.target.value})}\r\n            \r\n            />\r\n\r\n        <TextField\r\n            name=\"Reason\"\r\n            variant=\"outlined\"\r\n            fullWidth\r\n            label=\"Message\"\r\n            required\r\n            value={postData.Reason}\r\n            onChange={(e) => setPostData({...postData, Reason: e.target.value})}\r\n            \r\n            />\r\n            \r\n            <Button className={classes.buttonSubmit} variant='contained ' size=\"large\" type=\"submit\" fullWidth >Post</Button>\r\n            <Button variant='contained' className={classes.buttonClear} size=\"small\" onClick={clear} fullWidth >Clear</Button>\r\n\r\n            </form>\r\n\r\n\r\n        </Paper>\r\n    \r\n    );\r\n    \r\n}\r\nexport default CreateRequest;"],"mappings":";;AAAA,OAAOA,KAAK,IAAEC,QAAQ,QAAO,OAAO;AACpC,SAAQC,MAAM,EAAEC,IAAI,EAAEC,KAAK,EAAEC,YAAY,QAAO,QAAQ;AACxD,OAAO,KAAKC,GAAG,MAAM,KAAK;AAC1B,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,KAAK,QAAQ,gBAAgB;AACtC,OAAOC,SAAS,MAAM,UAAU;AAChC,SAASC,SAAS,EAAEC,UAAU,EAAEC,MAAM,EAAEC,KAAK,QAAO,eAAe;AAAC;AAEpE,SAASC,aAAa,GAAG;EAAA;EACrB,MAAMC,OAAO,GAAIN,SAAS,EAAE;EAC5B,MAAMO,IAAI,GAAIC,cAAc,CAACC,OAAO,CAAC,SAAS,CAAC;EAC/C,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGnB,QAAQ,CAAC;IACrCoB,UAAU,EAAC,EAAE;IACbC,OAAO,EAAC,EAAE;IACVC,MAAM,EAAC,EAAE;IACTC,UAAU,EAAC;EACf,CAAC,CAAC;;EAEF;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA,MAAMC,YAAY,GAAIC,CAAC,IAAG;IACtBA,CAAC,CAACC,cAAc,EAAE;;IAGlB;IACApB,KAAK,CAACqB,IAAI,CAAC,0CAA0C,EAAET,QAAQ,EAAC;MAC5DU,OAAO,EAAC;QACJC,YAAY,EAAGb,cAAc,CAACC,OAAO,CAAC,cAAc;MACxD;IACJ,CAAC,CAAC,CAACa,IAAI,CAAEC,QAAQ,IAAG;MAChB,IAAGA,QAAQ,CAACC,IAAI,CAACC,KAAK,EAAC;QACnB1B,KAAK,CAAC0B,KAAK,CAAC,0BAA0B,CAAC;MAC3C,CAAC,MAAI;QACLC,OAAO,CAACC,GAAG,CAACH,IAAI,CAAC;QACjBzB,KAAK,CAAC6B,OAAO,CAAC,gCAAgC,CAAC;MAC/C;IACJ,CAAC,CAAC;IACFC,KAAK,EAAE;EAEX,CAAC;EACD,MAAMA,KAAK,GAAG,MAAK;IACflB,WAAW,CAAC;MACRC,UAAU,EAAG,EAAE;MACfkB,UAAU,EAAG,EAAE;MACfjB,OAAO,EAAC,EAAE;MACVC,MAAM,EAAC;IACX,CAAC,CAAC;EACN,CAAC;EACD,oBAEI,QAAC,KAAK;IAAC,SAAS,EAAER,OAAO,CAACyB,KAAM;IAAC,SAAS,EAAE,EAAG;IAAA,uBAC3C;MAAM,YAAY,EAAC,KAAK;MAAC,QAAQ;MAAC,SAAS,EAAG,GAAEzB,OAAO,CAAC0B,IAAK,IAAG1B,OAAO,CAAC2B,IAAK,EAAE;MAAC,QAAQ,EAAEjB,YAAa;MAAA,wBAEvG,QAAC,UAAU;QAAC,OAAO,EAAC,IAAI;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAA6B,eACrD,QAAC,SAAS;QACV,IAAI,EAAC,YAAY;QACjB,OAAO,EAAC,UAAU;QAClB,SAAS;QACT,KAAK,EAAC,aAAa;QACnB,QAAQ;QACR,KAAK,EAAEN,QAAQ,CAACE,UAAW;QAC3B,QAAQ,EAAGK,CAAC,IAAKN,WAAW,CAAC;UAAC,GAAGD,QAAQ;UAAEE,UAAU,EAAEK,CAAC,CAACiB,MAAM,CAACC;QAAK,CAAC;MAAE;QAAA;QAAA;QAAA;MAAA,QAEtE,eAEN,QAAC,SAAS;QACN,IAAI,EAAC,aAAa;QAClB,OAAO,EAAC,UAAU;QAClB,SAAS;QACT,KAAK,EAAC,oBAAoB;QAC1B,IAAI,EAAC,QAAQ;QACb,QAAQ;QACR,KAAK,EAAEzB,QAAQ,CAACoB,UAAW;QAC3B,QAAQ,EAAGb,CAAC,IAAKN,WAAW,CAAC;UAAC,GAAGD,QAAQ;UAAEoB,UAAU,EAAEb,CAAC,CAACiB,MAAM,CAACC;QAAK,CAAC;MAAE;QAAA;QAAA;QAAA;MAAA,QAEtE,eAEN,QAAC,SAAS;QACN,IAAI,EAAC,SAAS;QACd,OAAO,EAAC,UAAU;QAClB,SAAS;QACT,KAAK,EAAC,eAAe;QACrB,IAAI,EAAC,QAAQ;QACb,QAAQ;QACR,KAAK,EAAEzB,QAAQ,CAACG,OAAQ;QACxB,QAAQ,EAAGI,CAAC,IAAKN,WAAW,CAAC;UAAC,GAAGD,QAAQ;UAAEG,OAAO,EAAEI,CAAC,CAACiB,MAAM,CAACC;QAAK,CAAC;MAAE;QAAA;QAAA;QAAA;MAAA,QAEnE,eAEN,QAAC,SAAS;QACN,IAAI,EAAC,QAAQ;QACb,OAAO,EAAC,UAAU;QAClB,SAAS;QACT,KAAK,EAAC,SAAS;QACf,QAAQ;QACR,KAAK,EAAEzB,QAAQ,CAACI,MAAO;QACvB,QAAQ,EAAGG,CAAC,IAAKN,WAAW,CAAC;UAAC,GAAGD,QAAQ;UAAEI,MAAM,EAAEG,CAAC,CAACiB,MAAM,CAACC;QAAK,CAAC;MAAE;QAAA;QAAA;QAAA;MAAA,QAElE,eAEF,QAAC,MAAM;QAAC,SAAS,EAAE7B,OAAO,CAAC8B,YAAa;QAAC,OAAO,EAAC,YAAY;QAAC,IAAI,EAAC,OAAO;QAAC,IAAI,EAAC,QAAQ;QAAC,SAAS;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAAe,eACjH,QAAC,MAAM;QAAC,OAAO,EAAC,WAAW;QAAC,SAAS,EAAE9B,OAAO,CAAC+B,WAAY;QAAC,IAAI,EAAC,OAAO;QAAC,OAAO,EAAER,KAAM;QAAC,SAAS;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAAgB;IAAA;MAAA;MAAA;MAAA;IAAA;EAE3G;IAAA;IAAA;IAAA;EAAA,QAGH;AAIhB;AAAC,GA/GQxB,aAAa;EAAA,QACDL,SAAS;AAAA;AAAA,KADrBK,aAAa;AAgHtB,eAAeA,aAAa;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}